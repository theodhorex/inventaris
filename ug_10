def quicksort(data, low, high):
    if low < high:
        pi = partition(data, low, high)
        quicksort(data, low, pi - 1)
        quicksort(data, pi + 1, high)

def partition(data, low, high):
    pivot = data[high][1]
    i = low - 1
    for j in range(low, high):
        if data[j][1] >= pivot:  # Sorting in descending order
            i += 1
            data[i], data[j] = data[j], data[i]
    data[i + 1], data[high] = data[high], data[i + 1]
    return i + 1

class PriorityQueueSorted:
    def __init__(self):
        self.queue = []
    def is_empty(self):
        return len(self.queue) == 0
    def __len__(self):
        return len(self.queue)
    def remove(self):
        if not self.is_empty():
            return self.queue.pop(0)
        else:
            print("Prioritas antriannya kosong")
    def peek(self):
        if not self.is_empty():
            print(self.queue[0])
        else:
            print("Prioritas antriannya kosong")
    def add(self, name, priority):
        self.queue.append((name, priority))
        quicksort(self.queue, 0, len(self.queue) - 1)
    def print_all(self):
        print(self.queue)

# Contoh penggunaan
myQueue = PriorityQueueSorted()
myQueue.add('Gian', 2)
myQueue.add('Kezia', 8)
myQueue.print_all()
myQueue.peek()
myQueue.add('Glen', 5)
myQueue.add('Christo', 9)
myQueue.print_all()
myQueue.peek()
print("========REMOVE========")
myQueue.remove()
myQueue.print_all()
myQueue.remove()
myQueue.print_all()
myQueue.remove()
myQueue.print_all()
myQueue.add('Saya', 7)
myQueue.print_all()
