class PriorityQueue:
    def __init__(self):
        self.data = []

    def is_empty(self):
        return len(self.data) == 0

    def peek(self):
        if self.is_empty():
            return
        return self.data[0]

    def enqueue(self, prioritas, data):
        self.data.append((prioritas, data))
        self.data.sort(reverse=True)

    def dequeue(self):
        if self.is_empty():
            return
        return self.data.pop(0)

    def write_all_data(self):
        print(self.data)

def print_pasien(pq: PriorityQueue):
    data = pq.data
    prioritas = ""
    n = 1
    for p, pasien in data:
        if p == 3:
            prioritas = "Sudah meninggal"
        elif p == 2:
            prioritas = "Merah"
        elif p == 1:
            prioritas = "Kuning"
        else:
            prioritas = "Invalid status"
        print(f"{n}. {pasien}, status: {prioritas}")
        n += 1

def determine_priority(name):
    # Step 1: Respiratory Check
    respiration = int(input(f"Kecepatan Respirasi per menit untuk {name}: "))
    if respiration == 0:
        return 3, name  # Status Hitam
    elif respiration < 10 or respiration > 30:
        return 2, name  # Status Merah
    
    # Step 2: Pulse Check
    pulse_weak = input(f"Denyut lemah/tidak terasa (y/n) untuk {name}: ").strip().lower()
    if pulse_weak == "y":
        return 2, name  # Status Merah

    # Step 3: Mental Status Check
    can_follow_commands = input(f"Apakah bisa diperintah? (y/n) untuk {name}: ").strip().lower()
    if can_follow_commands == "y":
        return 1, name  # Status Kuning
    else:
        return 2, name  # Status Merah

if __name__ == "__main__":
    pq = PriorityQueue()
    print("Masukkan 3 pasien")

    for _ in range(3):
        name = input("Nama pasien: ")
        priority, patient_name = determine_priority(name)
        pq.enqueue(priority, patient_name)

    print("\n=== HASIL DATA PASIEN ===")
    print_pasien(pq)
