class PriorityQueueSorted:
    def __init__(self):
        self.list = []

    def is_empty(self):
        return len(self.list) == 0

    def __len__(self):
        return len(self.list)

    def remove(self):
        if not self.is_empty():
            return self.list.pop(0)  # Return the item for consistency
        else:
            raise IndexError("remove from empty priority queue")

    def peek(self):
        if not self.is_empty():
            return self.list[0]
        else:
            raise IndexError("peek from empty priority queue")

    def add(self, data, priority):
        # Insert in sorted order without calling merge sort each time
        item = (data, priority)
        i = 0
        while i < len(self.list) and self.list[i][1] >= priority:
            i += 1
        self.list.insert(i, item)

    def print_all(self):
        print(self.list)


# Example usage
myQueue = PriorityQueueSorted()
myQueue.add('Gian', 2)
myQueue.add('Kezia', 8)
myQueue.print_all()
print("Peek:", myQueue.peek())
myQueue.add('Glen', 5)
myQueue.add('Christo', 9)
myQueue.print_all()
print("Peek:", myQueue.peek())
print("========REMOVE========")
print("Removed:", myQueue.remove())
myQueue.print_all()
print("Removed:", myQueue.remove())
myQueue.print_all()
print("Removed:", myQueue.remove())
myQueue.print_all()
myQueue.add('Saya', 7)
myQueue.print_all()
