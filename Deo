Soal Tahun lalu

[![Review Assignment Due Date](https://classroom.github.com/assets/deadline-readme-button-24ddc0f5d75046c5622901739e7c5dd533143b0c8e959d652212380cedb1ea36.svg)](https://classroom.github.com/a/tMuCstg0)
# UAS1
Lengkapi program pencatatan data  Mahasiswa berikut dapat melakukan inset, update, dan hapus data mahasiswa, dengan ketentuan sebagai berikut:  
- Data mahasiswa yang inputkan untuk insert data terdiri dari nim, nama, tempat_lahir, tanggal_lahir dan alamat.
- Data mahasiswa yang inputkan untuk update data terdiri dari nim, nama, tempat_lahir, tanggal_lahir dan alamat. Data diupdate berdsarkan NIM yang diinputkan.
- Data mahasiswa yang dihapus berdasarkan NIM yang diinputkan.
- Setiap form input harus menggunakan style yang telah disiapkan (styles.css)

Hint :
- untuk melihat data mahasiswa yang ada pada database, silahkan mengakses link http://127.0.0.1:5000/mhslist. Untuk mengakses link tersebut, pastikan Flask telah dijalankan

JAWABNYA 
from flask import Flask, redirect, render_template, request, url_for
import sqlite3

app = Flask(__name__)

@app.route('/success/<thenim>', methods=['GET'] )
def success(thenim):
    return 'Proses data Mahasiswa NIM: %s berhasil' % thenim

@app.route("/insertmhs/<nim>", methods=['POST'])  
def insertmahasiswa():
    nim = request.form['nim']
    count = insertmahasiswa(nim)

    if count is None :
        return redirect(url_for('proses data gagal'))
    return redirect (url_for('Proses data Mahasiswa NIM berhasil' ))

@app.route("/updatemhs/<nim>", methods=['POST'])  
def updatemahasiswa():
    nim = request.form['nim']
    count = insertmahasiswa(nim)

    if count is None :
        return redirect(url_for('proses data gagal'))
    return redirect (url_for('Proses data Mahasiswa NIM berhasil' ))

@app.route("/deletemhs/<nim>", methods=['POST'])  
def deletemahasiswa():
    nim = request.form['nim']
    count = insertmahasiswa(nim)

    if count is None :
        return redirect(url_for('proses data gagal'))
    return redirect (url_for('Proses data Mahasiswa NIM berhasil' ))

@app.route('/mhslist')
def userList():
    mhses = getAllMahasiswa()
    return render_template('mhslist.html', title='Daftar Mahasiswa', listmhs=mhses)

def insertMahasiswa(nim, nama, tempat_lahir, tanggal_lahir, alamat):
    connection = sqlite3.connect("mhs.db")
    cursor = connection.cursor()
    nim_value = nim
    nama_value = nama
    tempat_lahir_value = tempat_lahir
    tanggal_lahir_value = tanggal_lahir
    alamat_value = alamat
    cursor.execute("INSERT INTO mahasiswa (nim, nama, tempat_lahir, tanggal_lahir, alamat) VALUES (?, ?, ?, ?);",
                   (nim_value, nama_value, tempat_lahir_value, tanggal_lahir_value, alamat_value))
    connection.commit()
    connection.close

def updateMahasiswa(nim, nama, tempat_lahir, tanggal_lahir, alamat):
    connection = sqlite3.connect("mhs.db")
    cursor = connection.cursor()
    new_nim_value = nim_value
    new_nama_value = nama_value
    new_tempat_lahir_value = tempat_lahir_value
    new_tanggal_lahir_value = tanggal_lahir_value
    new_alamat_value = alamat_value
    nim_value = nim
    nama_value = nama
    tempat_lahir_value = tempat_lahir
    tanggal_lahir_value = tanggal_lahir
    alamat_value = alamat
    cursor.execute("UPDATE mahasiswa SET nim = ? WHERE nim = ?;",
                   (new_nim_value, nim_value))
    cursor.execute("UPDATE mahasiswa SET nama = ? WHERE nama = ?;",
                   (new_nama_value, nama_value))
    cursor.execute("UPDATE mahasiswa SET tempat lahir = ? WHERE tempat lahir = ?;",
                   (new_tempat_lahir_value, tempat_lahir_value))
    cursor.execute("UPDATE mahasiswa SET tanggal lahir = ? WHERE tanggal lahir = ?;",
                   (new_tanggal_lahir_value, tanggal_lahir_value))
    cursor.execute("UPDATE mahasiswa SET alamat = ? WHERE alamat = ?;",
                   (new_alamat_value, alamat_value))
    connection.commit()
    connection.close
    

def deleteMahasiswa(nim):
    connection = sqlite3.connect("mhs.db")
    cursor = connection.cursor()
    target_nim = nim
    cursor.execute ("DELETE FROM mahasiswa WHERE nim = ?;", (target_nim))
    connection.commit()
    connection.close
  
def getAllMahasiswa():
    # Open database connection
    connection = sqlite3.connect("mhs.db")
    cursor = connection.cursor()
    # Execute the query
    cursor.execute("SELECT nim, nama, tempat_lahir, tanggal_lahir, alamat FROM mahasiswa;")    

    # convert it into dictionary
    desc = cursor.description
    column_names = [col[0] for col in desc]
    data = [dict(zip(column_names, row))  
        for row in cursor.fetchall()]
    # Close the connection
    connection.close()
    return data

if __name__ == '__main__':
    app.run()
