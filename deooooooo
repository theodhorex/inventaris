di sini jo

class Node:
    def __init__(self, data, parent):
        self.data = data
        self.parent = parent
        self.left = None
        self.right = None

    def insert(self, data):
        if data < self.data:
            if self.left is None:
                self.left = Node(data, self)
            else:
                self.left.insert(data)
        elif data > self.data:
            if self.right is None:
                self.right = Node(data, self)
            else:
                self.right.insert(data)
        else:
            return False
        return True


class BinaryTree:
    def __init__(self):
        self.root = None

    def add(self, data):
        if self.root is None:
            self.root = Node(data, None)
        else:
            self.root.insert(data)

    def _sumGanjil(self, node):
        if node is None:
            return 0
        left_sum = self._sumGanjil(node.left)
        right_sum = self._sumGanjil(node.right)
        current_value = node.data if node.data % 2 != 0 else 0
        return left_sum + right_sum + current_value

    def _sumGenap(self, node):
        if node is None:
            return 0
        left_sum = self._sumGenap(node.left)
        right_sum = self._sumGenap(node.right)
        current_value = node.data if node.data % 2 == 0 else 0
        return left_sum + right_sum + current_value

    def hasilGanjil(self):
        if self.root is None:
            return "Jumlah data ganjil: 0"
        return f"Jumlah data ganjil: {self._sumGanjil(self.root)}"

    def hasilGenap(self):
        if self.root is None:
            return "Jumlah data genap: 0"
        return f"Jumlah data genap: {self._sumGenap(self.root)}"


if __name__ == '__main__':
    binaryT = BinaryTree()
    binaryT.add(5)
    binaryT.add(4)
    binaryT.add(3)
    binaryT.add(9)
    binaryT.add(8)
    binaryT.add(6)
    binaryT.add(7)
    binaryT.add(11)
    binaryT.add(10)
    print()
    print(binaryT.hasilGanjil())
    print(binaryT.hasilGenap())
