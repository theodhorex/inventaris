class Restoran:
    def __init__(self):
        self.size = 5  # Ukuran hash table
        self.map = [None] * self.size  # Inisialisasi hash table kosong

    def _getHash(self, key):
        hash = 0
        for char in str(key):
            hash += ord(char)  # Mendapatkan nilai ASCII dari karakter key
        return hash % self.size  # Menyaring hash dengan ukuran hash table

    def _probing(self, key):
        for index in range(self.size):
            probeHash = self._linearProbing(key, index)  # Mencari indeks kosong atau deleted
            if self.map[probeHash] is None or self.map[probeHash] == 'deleted':
                return probeHash

    # Melakukan linear probing untuk menemukan posisi berikutnya
    def _linearProbing(self, key, index):
        return (self._getHash(key) + index) % self.size

    # Menambahkan key-value ke dalam hash table
    def tambahReservasi(self, key, value):
        idx = self._probing(key)
        if self.map[idx] is None or self.map[idx] == 'deleted':
            self.map[idx] = (key, value)
            return True
        return False

    # Mencari nilai berdasarkan key yang diberikan
    def lihatReservasi(self, key):
        for index in range(self.size):
            probeHash = self._linearProbing(key, index)
            if self.map[probeHash] is None:  # Jika sudah tidak ada data di posisi ini
                return None
            if self.map[probeHash] != 'deleted' and self.map[probeHash][0] == key:
                return self.map[probeHash][1]
        return None

    # Menghapus reservasi berdasarkan key
    def reserveDone(self, key):
        for index in range(self.size):
            probeHash = self._linearProbing(key, index)
            if self.map[probeHash] is None:  # Jika sudah tidak ada data di posisi ini
                return False
            if self.map[probeHash] != 'deleted' and self.map[probeHash][0] == key:
                self.map[probeHash] = 'deleted'  # Tandai sebagai dihapus
                return True
        return False

    # Mencetak semua reservasi yang ada dalam hash table
    def printAll(self):
        for item in self.map:
            if item is not None and item != 'deleted':
                print(f"Key: {item[0]}, Value: {item[1]}")

# Main program untuk pengujian
if __name__ == "__main__":
    rak1 = Restoran()

    rak1.tambahReservasi("Draine", "Family Dinner")
    rak1.tambahReservasi("Perry", "Birthday Party")
    rak1.tambahReservasi("Octo", "Romantic Dinner")
    rak1.tambahReservasi("Peter", "Lunch")
    rak1.tambahReservasi("Hrain", "Test Food Wedding")
    rak1.tambahReservasi("Gura", "Garden Party")

    print(rak1.lihatReservasi("Octo"))  # Output: Romantic Dinner
    print(rak1.lihatReservasi("Buna"))  # Output: None

    rak1.reserveDone("Perry")
    rak1.reserveDone("Draine")
    
    rak1.printAll()  # Output semua reservasi yang tersisa
