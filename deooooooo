def plus_minus(node):
    # Perform a preorder traversal and calculate the result
    result = 0

    def traverse(n):
        nonlocal result
        if n.data % 2 == 0:  # Even numbers are added
            result += n.data
        else:  # Odd numbers are subtracted
            result -= n.data
        for child in n.children:
            traverse(child)

    traverse(node)
    return result


def find_deepest_leaf(node):
    # Find the depth of the deepest leaf node
    max_depth = 0

    def traverse(n, current_depth):
        nonlocal max_depth
        if n.is_external():  # Check if it's a leaf
            max_depth = max(max_depth, current_depth)
        for child in n.children:
            traverse(child, current_depth + 1)

    traverse(node, 0)
    return max_depth


def main():
    root = generate_tree(840)
    print(f"hasil plus minus = {plus_minus(root)}")
    print(f"leaf paling dalam = {find_deepest_leaf(root)}")
    print()
    root = generate_tree(1200)
    print(f"hasil plus minus = {plus_minus(root)}")
    print(f"leaf paling dalam = {find_deepest_leaf(root)}")
    print()
    root = generate_tree(8440)
    print(f"hasil plus minus = {plus_minus(root)}")
    print(f"leaf paling dalam = {find_deepest_leaf(root)}")
    print()
    root = generate_tree(53)
    print(f"hasil plus minus = {plus_minus(root)}")
    print(f"leaf paling dalam = {find_deepest_leaf(root)}")
    print()


if __name__ == "__main__":
    main()
