# UG 12 Tree

## Kerjakanlah pada file main.py
Pada UG ini, kalian sudah diberikan sebuah class Node yang merepresentasikan sebuah struktur data tree. Kalian juga diberikan sebuah fungsi bernama generate_tree(number). Fungsi ini berfungsi untuk men-generate suatu Tree berdasarkan angka yang dimasukkan sebagai parameter. Fungsi ini tidak usah kalian pikirkan karena fungsi ini hanya untuk mempermudah saat melakukan testing saja.

Yang harus kalian lakukan sekarang adalah membuat 2 buah fungsi: yang pertama, fungsi minus_plus. Fungsi ini berfungsi untuk menjumlahkan / mengurangkan semua node yang ada di dalam tree. Jika data ganjil, maka kurangkan, dan jika data genap, maka tambahkan. Misal, jika satu tree mempunyai node - node berikut: 20 2 10 2 5, maka hasil akhirnya adalah 29 (20 + 2 + 10 + 2 - 5). Contoh lainnya, jika suatu tree mempunyai node - node berikut: 23 25 27 26, maka hasil akhirnya adalah -49 (- 23 - 25 - 27 + 26).

fungsi yang kedua adalah fungsi bernama find_deepest_leaf. Fungsi ini akan mengembalikan kedalaman node paling dalam. Misal, jika ada sebuah tree :

![](ss.png)

maka, fungsi ini akan mengembalikan nilai 3, karena node leaf paling dalam adalah 29 dengan depth 3. 


## Test Case
    root = generate_tree(840)
    print(f"hasil plus minus = {plus_minus(root)}")
    print(f"leaf paling dalam = {find_deepest_leaf(root)}")
    print()
    root = generate_tree(1200)
    print(f"hasil plus minus = {plus_minus(root)}")
    print(f"leaf paling dalam = {find_deepest_leaf(root)}")
    print()
    root = generate_tree(8440)
    print(f"hasil plus minus = {plus_minus(root)}")
    print(f"leaf paling dalam = {find_deepest_leaf(root)}")
    print()
    root = generate_tree(53)
    print(f"hasil plus minus = {plus_minus(root)}")
    print(f"leaf paling dalam = {find_deepest_leaf(root)}")
    print()

## Output
    PS C:\Users\Gian\Documents\ukdw\ukdw smt5\asdos\minggu12d> python .\kj.py
    hasil plus minus = 1321
    leaf paling dalam = 5

    hasil plus minus = 2145
    leaf paling dalam = 6

    hasil plus minus = 13505
    leaf paling dalam = 4

    hasil plus minus = -53
    leaf paling dalam = 0

class Node:
    def __init__(self, parent, data):
        self.parent = parent
        self.data = data
        self.children = []

    def add(self, data):
        self.children.append(Node(self, data))
    
    def operator(self):
        return self.data
    
    def parent(self):
        return self.parent
    
    def children(self):
        return self.children
    
    def is_root(self):
        return self.parent == None
    
    def is_external(self):
        return self.children == []

def depth(node) :
    if node.parent == None:
        return 0
    else:
        return 1 + depth(node.parent)

def height(tree):
    if tree.is_external():
        return 0
    else:
        h = 0
        for i in tree.children():
            h = max(h, height(i))
        return h

def preorder(node):
    print(node.operator(), end = ' ')
    for i in node.children:
        preorder(i)

def postorder(node):
    for i in node.children:
        postorder(i)
    print(node.operator(), end=" ")
def generate_tree(number : int):
    def prime_factorize(number : int) -> list:
        n = 2
        factors = []
        while True:
            if number%n == 0:
                number = number//n
                factors.append(n)
            else:
                n += 1
                if n > number:
                    break
                continue
        return factors
    root : Node = Node(None, number)
    prime_factors = prime_factorize(number)
    if len(prime_factors) == 0:
        return root
    
    node_now = root
    for factor in prime_factors:
        if factor == number:
            break
        node_now.add(factor)
        right_child = (number//factor)
        node_now.add(right_child)
        number = right_child
        node_now = node_now.children[-1]
    return root

#
# Buat fungsi kalian di sini
#
def plus_minus(node):
    pass

def find_deepest_leaf(node):
    pass

def main():
    root = generate_tree(840)
    print(f"hasil plus minus = {plus_minus(root)}")
    print(f"leaf paling dalam = {find_deepest_leaf(root)}")
    print()
    root = generate_tree(1200)
    print(f"hasil plus minus = {plus_minus(root)}")
    print(f"leaf paling dalam = {find_deepest_leaf(root)}")
    print()
    root = generate_tree(8440)
    print(f"hasil plus minus = {plus_minus(root)}")
    print(f"leaf paling dalam = {find_deepest_leaf(root)}")
    print()
    root = generate_tree(53)
    print(f"hasil plus minus = {plus_minus(root)}")
    print(f"leaf paling dalam = {find_deepest_leaf(root)}")
    print()
    

if __name__ == "__main__":
    main()
