from BinaryTreeNode import BinaryTreeNode

class BinaryTree:
    def __init__(self, root):
        self.root = BinaryTreeNode(root)

    def visualize(self):
        levels = self._get_tree_levels()
        max_width = 2 ** (len(levels) - 1) * 4

        for level in levels:
            space_between_nodes = max_width // len(level)
            current_line = ''
            for node in level:
                if node:
                    current_line += str(node.value).center(space_between_nodes)
                else:
                    current_line += ' ' * space_between_nodes
            print(current_line)
    
    def _get_tree_levels(self):
        levels = []
        current_level = [self.root]

        while any(current_level):
            next_level = []
            for node in current_level:
                if node:
                    next_level.append(node.left)
                    next_level.append(node.right)
                else:
                    next_level.append(None)
                    next_level.append(None)
            levels.append(current_level)
            current_level = next_level

        while levels and all(node is None for node in levels[-1]):
            levels.pop()

        return levels
      
    def insert(self, value):
        self._insert(self.root, value)

    def update(self, old_value, new_value):
        self._update_node(self.root, old_value, new_value)
        
    def delete(self, value):
        self.root = self._delete_node(self.root, value)
        
    def _insert(self, node, value):
        if node is None:
            return BinaryTreeNode(value)
        
        if value < node.value:
            node.left = self._insert(node.left, value)
        else:
            node.right = self._insert(node.right, value)
        
        return node
      
    def _update_node(self, node, old_value, new_value):
        if node is None:
            return None
        
        if old_value < node.value:
            node.left = self._update_node(node.left, old_value, new_value)
        elif old_value > node.value:
            node.right = self._update_node(node.right, old_value, new_value)
        else:
            node.value = new_value
        
        return node
    
    def _delete_node(self, node, value):      
        if node is None:
            return node
        
        if value < node.value:
            node.left = self._delete_node(node.left, value)
        elif value > node.value:
            node.right = self._delete_node(node.right, value)
        else:
            # Case 1: No child (leaf node)
            if node.left is None and node.right is None:
                node = None
            # Case 2: One child (left or right)
            elif node.left is None:
                node = node.right
            elif node.right is None:
                node = node.left
            # Case 3: Two children
            else:
                min_node = self._find_min(node.right)
                node.value = min_node.value
                node.right = self._delete_node(node.right, min_node.value)
        
        return node

    def _find_min(self, node):
        while node.left:
            node = node.left
        return node
    
    def show_leaf_nodes(self):
        leaf_nodes = self._find_leaf_nodes(self.root)
        print("Leaf nodes:", leaf_nodes)

    def _find_leaf_nodes(self, node):
        if node is None:
            return []
        if node.left is None and node.right is None:
            return [node.value]
        return self._find_leaf_nodes(node.left) + self._find_leaf_nodes(node.right)

# Contoh penggunaan:
sample_tree = BinaryTree(10)
sample_tree.insert(1)
sample_tree.insert(4)
sample_tree.insert(5)
sample_tree.insert(10)
sample_tree.insert(8)
sample_tree.insert(12)
sample_tree.insert(3)
sample_tree.insert(9)
sample_tree.insert(2)
sample_tree.insert(0)

# Visualize tree
print("Original Tree:")
sample_tree.visualize()

# Update node
sample_tree.update(2, 6)

# Visualize updated tree
print("\nUpdated Tree:")
sample_tree.visualize()

# hapus node
sample_tree.delete(4)

# Visualize the updated tree
print("\nTree setelah menghapus 4:")
sample_tree.visualize()

# Show leaf nodes
sample_tree.show_leaf_nodes()
