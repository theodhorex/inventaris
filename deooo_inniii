class Resto:
    def __init__(self):
        self.data = []

    def is_empty(self):
        return len(self.data) == 0

    def add(self, item, priority):
        self.data.append((priority, item))
        self.data.sort(reverse=True)  # Prioritas tertinggi berada di awal

    def change_priority(self, item, new_priority):
        # Cari item yang sesuai dan ubah prioritasnya
        for i, (priority, current_item) in enumerate(self.data):
            if current_item == item:
                self.data[i] = (new_priority, item)
                self.data.sort(reverse=True)  # Urutkan ulang setelah perubahan
                break

    def remove_highest_priority(self):
        if not self.is_empty():
            self.data.pop(0)  # Hapus item dengan prioritas tertinggi (index 0)

    def remove_with_priority(self, priority):
        # Hapus item dengan prioritas yang sesuai parameter
        self.data = [(p, i) for p, i in self.data if p != priority]

    def display(self):
        for priority, item in self.data:
            print(f"Priority: {priority}, Item: {item}")


# TEST CASE
antrian = Resto()
antrian.add("Pesan Pizza", 2)
antrian.add("Pesan Ayam Goreng", 1)
antrian.add("Pesan Burger", 3)

print("Isi awal Pesanan:")
antrian.display()

print("\nPesanan Ayam Goreng diminta cepat!!!")
antrian.change_priority("Pesan Ayam Goreng", 4)
antrian.display()

print("\n##### PESANAN PERTAMA SELESAI #####\n")
antrian.remove_highest_priority()

print("Sisa pesanan: ")
antrian.display()

print("\nPesanan dengan prioritas ini telah selesai")
antrian.remove_with_priority(2)
antrian.display()
